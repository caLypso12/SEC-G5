// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axil_mat_prod1_axil_mat_prod1,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=36008,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1152,HLS_SYN_LUT=1133,HLS_VERSION=2024_1}" *)

module axil_mat_prod1 (
        ap_clk,
        ap_rst_n,
        s_axi_BUS1_AWVALID,
        s_axi_BUS1_AWREADY,
        s_axi_BUS1_AWADDR,
        s_axi_BUS1_WVALID,
        s_axi_BUS1_WREADY,
        s_axi_BUS1_WDATA,
        s_axi_BUS1_WSTRB,
        s_axi_BUS1_ARVALID,
        s_axi_BUS1_ARREADY,
        s_axi_BUS1_ARADDR,
        s_axi_BUS1_RVALID,
        s_axi_BUS1_RREADY,
        s_axi_BUS1_RDATA,
        s_axi_BUS1_RRESP,
        s_axi_BUS1_BVALID,
        s_axi_BUS1_BREADY,
        s_axi_BUS1_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;
parameter    C_S_AXI_BUS1_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS1_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS1_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_BUS1_AWVALID;
output   s_axi_BUS1_AWREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_AWADDR;
input   s_axi_BUS1_WVALID;
output   s_axi_BUS1_WREADY;
input  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_WDATA;
input  [C_S_AXI_BUS1_WSTRB_WIDTH - 1:0] s_axi_BUS1_WSTRB;
input   s_axi_BUS1_ARVALID;
output   s_axi_BUS1_ARREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_ARADDR;
output   s_axi_BUS1_RVALID;
input   s_axi_BUS1_RREADY;
output  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_RDATA;
output  [1:0] s_axi_BUS1_RRESP;
output   s_axi_BUS1_BVALID;
input   s_axi_BUS1_BREADY;
output  [1:0] s_axi_BUS1_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_ready;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln16_reg_359;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [9:0] m1_address0;
wire   [31:0] m1_q0;
wire   [9:0] m2_address0;
wire   [31:0] m2_q0;
wire   [9:0] m3_address0;
wire   [31:0] N1;
wire   [31:0] N2;
wire   [31:0] N3;
reg   [31:0] regc;
wire  signed [9:0] trunc_ln3_fu_149_p1;
reg  signed [9:0] trunc_ln3_reg_342;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_2_reg_353;
wire   [0:0] icmp_ln16_fu_175_p2;
reg   [0:0] icmp_ln16_reg_359_pp0_iter1_reg;
reg   [0:0] icmp_ln16_reg_359_pp0_iter2_reg;
wire   [9:0] trunc_ln14_fu_187_p1;
reg   [9:0] trunc_ln14_reg_363;
reg   [9:0] trunc_ln14_reg_363_pp0_iter1_reg;
wire  signed [9:0] trunc_ln14_1_fu_191_p1;
reg  signed [9:0] trunc_ln14_1_reg_369;
wire  signed [9:0] trunc_ln14_2_fu_195_p1;
reg  signed [9:0] trunc_ln14_2_reg_375;
wire   [0:0] icmp_ln20_fu_199_p2;
reg   [0:0] icmp_ln20_reg_381;
reg   [0:0] icmp_ln20_reg_381_pp0_iter1_reg;
reg   [0:0] icmp_ln20_reg_381_pp0_iter2_reg;
reg   [0:0] icmp_ln20_reg_381_pp0_iter3_reg;
wire   [31:0] k_1_fu_205_p2;
reg   [31:0] k_1_reg_386;
wire   [0:0] icmp_ln23_fu_211_p2;
reg   [0:0] icmp_ln23_reg_391;
reg   [0:0] icmp_ln23_reg_391_pp0_iter1_reg;
reg   [0:0] icmp_ln23_reg_391_pp0_iter2_reg;
reg   [0:0] icmp_ln23_reg_391_pp0_iter3_reg;
wire   [31:0] j_1_fu_217_p2;
reg   [31:0] j_1_reg_395;
wire   [0:0] icmp_ln27_fu_223_p2;
reg   [0:0] icmp_ln27_reg_400;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] m1_load_reg_416;
reg  signed [31:0] m2_load_reg_421;
wire   [9:0] grp_fu_315_p3;
reg  signed [9:0] add_ln25_reg_426;
reg  signed [9:0] add_ln25_reg_426_pp0_iter3_reg;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] mul_reg_431;
wire   [31:0] empty_fu_282_p3;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln19_fu_265_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln19_1_fu_269_p1;
wire   [63:0] zext_ln25_fu_295_p1;
reg   [31:0] k_fu_76;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_k_load;
wire    ap_block_pp0_stage0;
reg   [31:0] j_fu_80;
wire   [31:0] j_2_fu_244_p3;
reg   [31:0] ap_sig_allocacmp_j_load;
reg   [31:0] i_fu_84;
wire   [31:0] i_3_fu_238_p3;
reg   [31:0] ap_sig_allocacmp_i_2;
reg    m1_ce0_local;
reg    m2_ce0_local;
reg    m3_we0_local;
reg    m3_ce0_local;
wire   [31:0] add_ln27_fu_233_p2;
wire  signed [9:0] zext_ln19_fu_265_p0;
wire   [9:0] grp_fu_299_p3;
wire  signed [9:0] zext_ln19_1_fu_269_p0;
wire   [9:0] grp_fu_307_p3;
wire   [31:0] add_ln21_fu_277_p2;
wire  signed [9:0] grp_fu_299_p0;
wire  signed [9:0] grp_fu_299_p1;
wire  signed [9:0] grp_fu_307_p0;
wire  signed [9:0] grp_fu_307_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter3_stage0;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to4;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_413;
reg    ap_condition_417;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 regc = 32'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 k_fu_76 = 32'd0;
#0 j_fu_80 = 32'd0;
#0 i_fu_84 = 32'd0;
#0 ap_done_reg = 1'b0;
end

axil_mat_prod1_BUS1_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS1_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS1_DATA_WIDTH ))
BUS1_s_axi_U(
    .AWVALID(s_axi_BUS1_AWVALID),
    .AWREADY(s_axi_BUS1_AWREADY),
    .AWADDR(s_axi_BUS1_AWADDR),
    .WVALID(s_axi_BUS1_WVALID),
    .WREADY(s_axi_BUS1_WREADY),
    .WDATA(s_axi_BUS1_WDATA),
    .WSTRB(s_axi_BUS1_WSTRB),
    .ARVALID(s_axi_BUS1_ARVALID),
    .ARREADY(s_axi_BUS1_ARREADY),
    .ARADDR(s_axi_BUS1_ARADDR),
    .RVALID(s_axi_BUS1_RVALID),
    .RREADY(s_axi_BUS1_RREADY),
    .RDATA(s_axi_BUS1_RDATA),
    .RRESP(s_axi_BUS1_RRESP),
    .BVALID(s_axi_BUS1_BVALID),
    .BREADY(s_axi_BUS1_BREADY),
    .BRESP(s_axi_BUS1_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .N1(N1),
    .N2(N2),
    .N3(N3),
    .m1_address0(m1_address0),
    .m1_ce0(m1_ce0_local),
    .m1_q0(m1_q0),
    .m2_address0(m2_address0),
    .m2_ce0(m2_ce0_local),
    .m2_q0(m2_q0),
    .m3_address0(m3_address0),
    .m3_ce0(m3_ce0_local),
    .m3_we0(m3_we0_local),
    .m3_d0(empty_fu_282_p3),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

axil_mat_prod1_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(m2_load_reg_421),
    .din1(m1_load_reg_416),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

axil_mat_prod1_mac_muladd_10s_10s_10s_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_10s_10s_10s_10_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_299_p0),
    .din1(grp_fu_299_p1),
    .din2(trunc_ln14_1_reg_369),
    .ce(1'b1),
    .dout(grp_fu_299_p3)
);

axil_mat_prod1_mac_muladd_10s_10s_10ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_10s_10s_10ns_10_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_307_p0),
    .din1(grp_fu_307_p1),
    .din2(trunc_ln14_reg_363),
    .ce(1'b1),
    .dout(grp_fu_307_p3)
);

axil_mat_prod1_mac_muladd_10s_10s_10ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_10s_10s_10ns_10_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln14_2_reg_375),
    .din1(trunc_ln3_reg_342),
    .din2(trunc_ln14_reg_363_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_315_p3)
);

axil_mat_prod1_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_417)) begin
            i_fu_84 <= 32'd0;
        end else if ((1'b1 == ap_condition_413)) begin
            i_fu_84 <= i_3_fu_238_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_417)) begin
            j_fu_80 <= 32'd0;
        end else if ((1'b1 == ap_condition_413)) begin
            j_fu_80 <= j_2_fu_244_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln16_reg_359 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln23_reg_391 == 1'd1)))) begin
        k_fu_76 <= 32'd0;
    end else if (((icmp_ln16_reg_359 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln23_reg_391 == 1'd0))) begin
        k_fu_76 <= k_1_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln25_reg_426 <= grp_fu_315_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln25_reg_426_pp0_iter3_reg <= add_ln25_reg_426;
        i_2_reg_353 <= ap_sig_allocacmp_i_2;
        icmp_ln16_reg_359 <= icmp_ln16_fu_175_p2;
        icmp_ln16_reg_359_pp0_iter1_reg <= icmp_ln16_reg_359;
        icmp_ln16_reg_359_pp0_iter2_reg <= icmp_ln16_reg_359_pp0_iter1_reg;
        icmp_ln20_reg_381 <= icmp_ln20_fu_199_p2;
        icmp_ln20_reg_381_pp0_iter1_reg <= icmp_ln20_reg_381;
        icmp_ln20_reg_381_pp0_iter2_reg <= icmp_ln20_reg_381_pp0_iter1_reg;
        icmp_ln20_reg_381_pp0_iter3_reg <= icmp_ln20_reg_381_pp0_iter2_reg;
        icmp_ln23_reg_391 <= icmp_ln23_fu_211_p2;
        icmp_ln23_reg_391_pp0_iter1_reg <= icmp_ln23_reg_391;
        icmp_ln23_reg_391_pp0_iter2_reg <= icmp_ln23_reg_391_pp0_iter1_reg;
        icmp_ln23_reg_391_pp0_iter3_reg <= icmp_ln23_reg_391_pp0_iter2_reg;
        icmp_ln27_reg_400 <= icmp_ln27_fu_223_p2;
        j_1_reg_395 <= j_1_fu_217_p2;
        k_1_reg_386 <= k_1_fu_205_p2;
        m1_load_reg_416 <= m1_q0;
        m2_load_reg_421 <= m2_q0;
        mul_reg_431 <= grp_fu_145_p2;
        trunc_ln14_1_reg_369 <= trunc_ln14_1_fu_191_p1;
        trunc_ln14_2_reg_375 <= trunc_ln14_2_fu_195_p1;
        trunc_ln14_reg_363 <= trunc_ln14_fu_187_p1;
        trunc_ln14_reg_363_pp0_iter1_reg <= trunc_ln14_reg_363;
        trunc_ln3_reg_342 <= trunc_ln3_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        regc <= empty_fu_282_p3;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_359 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_359_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 32'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 32'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m1_ce0_local = 1'b1;
    end else begin
        m1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m2_ce0_local = 1'b1;
    end else begin
        m2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        m3_ce0_local = 1'b1;
    end else begin
        m3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln23_reg_391_pp0_iter3_reg == 1'd1))) begin
        m3_we0_local = 1'b1;
    end else begin
        m3_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_277_p2 = (regc + mul_reg_431);

assign add_ln27_fu_233_p2 = (i_2_reg_353 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_413 = ((icmp_ln16_reg_359 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln23_reg_391 == 1'd1));
end

always @ (*) begin
    ap_condition_417 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_282_p3 = ((icmp_ln20_reg_381_pp0_iter3_reg[0:0] == 1'b1) ? mul_reg_431 : add_ln21_fu_277_p2);

assign grp_fu_299_p0 = ap_sig_allocacmp_i_2[9:0];

assign grp_fu_299_p1 = N2[9:0];

assign grp_fu_307_p0 = ap_sig_allocacmp_k_load[9:0];

assign grp_fu_307_p1 = N3[9:0];

assign i_3_fu_238_p3 = ((icmp_ln27_reg_400[0:0] == 1'b1) ? add_ln27_fu_233_p2 : i_2_reg_353);

assign icmp_ln16_fu_175_p2 = (($signed(ap_sig_allocacmp_i_2) < $signed(N1)) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_199_p2 = ((ap_sig_allocacmp_k_load == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_211_p2 = ((k_1_fu_205_p2 == N2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_223_p2 = ((j_1_fu_217_p2 == N3) ? 1'b1 : 1'b0);

assign j_1_fu_217_p2 = (ap_sig_allocacmp_j_load + 32'd1);

assign j_2_fu_244_p3 = ((icmp_ln27_reg_400[0:0] == 1'b1) ? 32'd0 : j_1_reg_395);

assign k_1_fu_205_p2 = (ap_sig_allocacmp_k_load + 32'd1);

assign m1_address0 = zext_ln19_fu_265_p1;

assign m2_address0 = zext_ln19_1_fu_269_p1;

assign m3_address0 = zext_ln25_fu_295_p1;

assign trunc_ln14_1_fu_191_p1 = ap_sig_allocacmp_k_load[9:0];

assign trunc_ln14_2_fu_195_p1 = ap_sig_allocacmp_i_2[9:0];

assign trunc_ln14_fu_187_p1 = ap_sig_allocacmp_j_load[9:0];

assign trunc_ln3_fu_149_p1 = N3[9:0];

assign zext_ln19_1_fu_269_p0 = grp_fu_307_p3;

assign zext_ln19_1_fu_269_p1 = $unsigned(zext_ln19_1_fu_269_p0);

assign zext_ln19_fu_265_p0 = grp_fu_299_p3;

assign zext_ln19_fu_265_p1 = $unsigned(zext_ln19_fu_265_p0);

assign zext_ln25_fu_295_p1 = $unsigned(add_ln25_reg_426_pp0_iter3_reg);

endmodule //axil_mat_prod1
