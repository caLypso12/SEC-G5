-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axil_conv2D_axil_conv2D_Pipeline_loop_i_loop_j is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_in_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    image_in_ce0 : OUT STD_LOGIC;
    image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_15 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_214 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_1_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_1_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_2_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv3_i_i97_2_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty : IN STD_LOGIC_VECTOR (20 downto 0);
    image_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    image_out_ce0 : OUT STD_LOGIC;
    image_out_we0 : OUT STD_LOGIC;
    image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of axil_conv2D_axil_conv2D_Pipeline_loop_i_loop_j is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_58 : STD_LOGIC_VECTOR (12 downto 0) := "0000001011000";
    constant ap_const_lv13_AE : STD_LOGIC_VECTOR (12 downto 0) := "0000010101110";
    constant ap_const_lv13_B2 : STD_LOGIC_VECTOR (12 downto 0) := "0000010110010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_59 : STD_LOGIC_VECTOR (12 downto 0) := "0000001011001";
    constant ap_const_lv13_5A : STD_LOGIC_VECTOR (12 downto 0) := "0000001011010";
    constant ap_const_lv13_B0 : STD_LOGIC_VECTOR (12 downto 0) := "0000010110000";
    constant ap_const_lv13_B1 : STD_LOGIC_VECTOR (12 downto 0) := "0000010110001";
    constant ap_const_lv13_1CE3 : STD_LOGIC_VECTOR (12 downto 0) := "1110011100011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal icmp_ln25_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage8 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln278_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv3_i_i97_2_2_cast_fu_303_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_2_2_cast_reg_897 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_2_1_cast_fu_307_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_2_1_cast_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_2_cast_fu_311_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_2_cast_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_1_2_cast_fu_315_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_1_2_cast_reg_912 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_1_1_cast_fu_319_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_1_1_cast_reg_917 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_1_cast_fu_323_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_1_cast_reg_922 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_214_cast_fu_327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_214_cast_reg_927 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_15_cast_fu_331_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_15_cast_reg_932 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_cast_fu_335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_i_i97_cast_reg_937 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln25_fu_393_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln25_reg_942 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln25_3_fu_401_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln25_3_reg_954 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_7_fu_463_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_7_reg_974 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_in_load_1_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_778_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln52_reg_1019 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_786_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln40_5_reg_1034 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_793_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln40_6_reg_1064 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal add_ln40_7_fu_658_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln40_7_reg_1084 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln27_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_1094 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_808_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln40_1_reg_1103 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_815_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln40_reg_1108 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_fu_720_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_reg_1118 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_reg_1124 : STD_LOGIC_VECTOR (12 downto 0);
    signal acc_sat_1_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_phi_mux_icmp_ln278_phi_fu_291_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln37_7_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln37_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln37_1_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln37_3_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln37_2_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln37_4_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln37_5_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln37_6_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln52_1_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten2_fu_102 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln25_2_fu_664_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvars_iv353_fu_106 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal select_ln25_2_fu_617_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvars_iv4_fu_110 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal ap_sig_allocacmp_indvars_iv4_load : STD_LOGIC_VECTOR (12 downto 0);
    signal i5_fu_114 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_2_fu_431_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_1d_idx6_fu_118 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal ap_sig_allocacmp_image_1d_idx6_load : STD_LOGIC_VECTOR (12 downto 0);
    signal j7_fu_122 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal j_fu_507_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_19_fu_126 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_fu_447_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2510_fu_130 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln25_fu_513_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_add_ln2510_load : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln25_111_fu_134 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln25_1_fu_675_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_in_ce0_local : STD_LOGIC;
    signal image_in_address0_local : STD_LOGIC_VECTOR (12 downto 0);
    signal image_out_we0_local : STD_LOGIC;
    signal image_out_ce0_local : STD_LOGIC;
    signal image_1d_idx_6_fu_409_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_fu_493_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln25_1_fu_485_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_1_fu_531_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_1_fu_531_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_1_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal image_1d_idx_2_fu_544_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_1_fu_558_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_3_fu_572_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln40_3_fu_589_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_3_fu_589_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_3_fu_589_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal image_1d_idx_4_fu_598_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln40_5_fu_629_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_5_fu_629_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_5_fu_629_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal image_1d_idx_5_fu_642_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_800_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln40_6_fu_655_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln40_4_fu_652_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln40_3_fu_709_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln40_7_fu_717_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln40_3_fu_712_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln40_3_fu_712_p2 : signal is "no";
    signal icmp_ln45_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_sat_fu_751_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_fu_748_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_778_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_778_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_778_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_786_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_793_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_793_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_800_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_808_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_808_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_815_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_815_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_821_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_821_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage5 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_778_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_778_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_786_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_793_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_800_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_808_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_815_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_821_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_1_fu_531_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_3_fu_589_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_5_fu_629_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_800 : BOOLEAN;
    signal ap_condition_805 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component axil_conv2D_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_7ns_7ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_8ns_8s_21s_21_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component axil_conv2D_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8s_16_1_1_U1 : component axil_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln40_1_fu_531_p0,
        din1 => mul_ln40_1_fu_531_p1,
        dout => mul_ln40_1_fu_531_p2);

    mul_8ns_8s_16_1_1_U2 : component axil_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln40_3_fu_589_p0,
        din1 => mul_ln40_3_fu_589_p1,
        dout => mul_ln40_3_fu_589_p2);

    mul_8ns_8s_16_1_1_U3 : component axil_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln40_5_fu_629_p0,
        din1 => mul_ln40_5_fu_629_p1,
        dout => mul_ln40_5_fu_629_p2);

    mac_muladd_7ns_7ns_7ns_13_4_1_U4 : component axil_conv2D_mac_muladd_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_778_p0,
        din1 => grp_fu_778_p1,
        din2 => grp_fu_778_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_778_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U5 : component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_786_p0,
        din1 => grp_fu_786_p1,
        din2 => mul_ln40_1_fu_531_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_786_p3);

    mac_muladd_8ns_8s_17s_18_4_1_U6 : component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_793_p0,
        din1 => grp_fu_793_p1,
        din2 => add_ln40_5_reg_1034,
        ce => ap_const_logic_1,
        dout => grp_fu_793_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U7 : component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_800_p0,
        din1 => grp_fu_800_p1,
        din2 => mul_ln40_3_fu_589_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_800_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U8 : component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_808_p0,
        din1 => grp_fu_808_p1,
        din2 => mul_ln40_5_fu_629_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_808_p3);

    mac_muladd_8ns_8s_21s_21_4_1_U9 : component axil_conv2D_mac_muladd_8ns_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_815_p0,
        din1 => grp_fu_815_p1,
        din2 => empty,
        ce => ap_const_logic_1,
        dout => grp_fu_815_p3);

    mac_muladd_8ns_8s_17s_18_4_1_U10 : component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_821_p0,
        din1 => grp_fu_821_p1,
        din2 => add_ln40_1_reg_1103,
        ce => ap_const_logic_1,
        dout => grp_fu_821_p3);

    flow_control_loop_pipe_sequential_init_U : component axil_conv2D_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage8,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    add_ln2510_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_ln2510_fu_130 <= ap_const_lv13_58;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                add_ln2510_fu_130 <= add_ln25_fu_513_p2;
            end if; 
        end if;
    end process;

    add_ln25_111_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_ln25_111_fu_134 <= ap_const_lv13_AE;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                add_ln25_111_fu_134 <= add_ln25_1_fu_675_p2;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage5)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i5_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i5_fu_114 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i5_fu_114 <= i_2_fu_431_p3;
            end if; 
        end if;
    end process;

    i_19_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_19_fu_126 <= ap_const_lv7_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_19_fu_126 <= i_fu_447_p2;
            end if; 
        end if;
    end process;

    icmp_ln278_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_805)) then 
                    icmp_ln278_reg_288 <= icmp_ln27_reg_1089;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    icmp_ln278_reg_288 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    image_1d_idx6_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_1d_idx6_fu_118 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                image_1d_idx6_fu_118 <= image_1d_idx_7_fu_463_p2;
            end if; 
        end if;
    end process;

    indvar_flatten2_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten2_fu_102 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                indvar_flatten2_fu_102 <= add_ln25_2_fu_664_p2;
            end if; 
        end if;
    end process;

    indvars_iv353_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvars_iv353_fu_106 <= ap_const_lv13_56;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                indvars_iv353_fu_106 <= select_ln25_2_fu_617_p3;
            end if; 
        end if;
    end process;

    indvars_iv4_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then 
                    indvars_iv4_fu_110 <= select_ln25_3_fu_401_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv4_fu_110 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j7_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j7_fu_122 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                j7_fu_122 <= j_fu_507_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                acc_reg_1118 <= acc_fu_720_p2;
                tmp_1_reg_1124 <= acc_fu_720_p2(20 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln40_1_reg_1103 <= grp_fu_808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln40_5_reg_1034 <= grp_fu_786_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln40_6_reg_1064 <= grp_fu_793_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                add_ln40_7_reg_1084 <= add_ln40_7_fu_658_p2;
                icmp_ln25_reg_1094 <= icmp_ln25_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln40_reg_1108 <= grp_fu_815_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln52_reg_1019 <= grp_fu_778_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv3_i_i97_15_cast_reg_932 <= conv3_i_i97_15_cast_fu_331_p1;
                conv3_i_i97_1_1_cast_reg_917 <= conv3_i_i97_1_1_cast_fu_319_p1;
                conv3_i_i97_1_2_cast_reg_912 <= conv3_i_i97_1_2_cast_fu_315_p1;
                conv3_i_i97_1_cast_reg_922 <= conv3_i_i97_1_cast_fu_323_p1;
                conv3_i_i97_214_cast_reg_927 <= conv3_i_i97_214_cast_fu_327_p1;
                conv3_i_i97_2_1_cast_reg_902 <= conv3_i_i97_2_1_cast_fu_307_p1;
                conv3_i_i97_2_2_cast_reg_897 <= conv3_i_i97_2_2_cast_fu_303_p1;
                conv3_i_i97_2_cast_reg_907 <= conv3_i_i97_2_cast_fu_311_p1;
                conv3_i_i97_cast_reg_937 <= conv3_i_i97_cast_fu_335_p1;
                select_ln25_3_reg_954 <= select_ln25_3_fu_401_p3;
                select_ln25_reg_942 <= select_ln25_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                icmp_ln27_reg_1089 <= icmp_ln27_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                image_1d_idx_7_reg_974 <= image_1d_idx_7_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                image_in_load_1_reg_989 <= image_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then
                reg_299 <= image_in_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage8_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage5, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    acc_fu_720_p2 <= std_logic_vector(signed(sext_ln40_7_fu_717_p1) + signed(add_ln40_3_fu_712_p2));
    acc_sat_1_fu_765_p3 <= 
        acc_sat_fu_751_p3 when (empty_14_fu_759_p2(0) = '1') else 
        trunc_ln50_fu_748_p1;
    acc_sat_fu_751_p3 <= 
        ap_const_lv8_FF when (icmp_ln45_fu_736_p2(0) = '1') else 
        ap_const_lv8_0;
    add_ln25_1_fu_675_p2 <= std_logic_vector(unsigned(select_ln25_2_fu_617_p3) + unsigned(ap_const_lv13_58));
    add_ln25_2_fu_664_p2 <= std_logic_vector(unsigned(indvar_flatten2_fu_102) + unsigned(ap_const_lv13_1));
    add_ln25_fu_513_p2 <= std_logic_vector(unsigned(select_ln25_3_reg_954) + unsigned(ap_const_lv13_58));
    add_ln40_3_fu_712_p2 <= std_logic_vector(signed(sext_ln40_3_fu_709_p1) + signed(add_ln40_reg_1108));
    add_ln40_7_fu_658_p2 <= std_logic_vector(signed(sext_ln40_6_fu_655_p1) + signed(sext_ln40_4_fu_652_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_800_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln25_reg_1094, ap_block_pp0_stage0)
    begin
                ap_condition_800 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_1094 = ap_const_lv1_0));
    end process;


    ap_condition_805_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln25_reg_1094)
    begin
                ap_condition_805 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_1094 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone, icmp_ln25_fu_681_p2)
    begin
        if (((icmp_ln25_fu_681_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, icmp_ln25_reg_1094, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_1094 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter1_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage8;

    ap_phi_mux_icmp_ln278_phi_fu_291_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_1089, ap_loop_init, ap_condition_800)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_800)) then 
                ap_phi_mux_icmp_ln278_phi_fu_291_p4 <= icmp_ln27_reg_1089;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln278_phi_fu_291_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln278_phi_fu_291_p4 <= icmp_ln27_reg_1089;
            end if;
        else 
            ap_phi_mux_icmp_ln278_phi_fu_291_p4 <= icmp_ln27_reg_1089;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_add_ln2510_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, add_ln2510_fu_130)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_add_ln2510_load <= ap_const_lv13_58;
        else 
            ap_sig_allocacmp_add_ln2510_load <= add_ln2510_fu_130;
        end if; 
    end process;


    ap_sig_allocacmp_image_1d_idx6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, image_1d_idx6_fu_118)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_image_1d_idx6_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_image_1d_idx6_load <= image_1d_idx6_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvars_iv4_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv4_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvars_iv4_load <= indvars_iv4_fu_110;
        end if; 
    end process;

        conv3_i_i97_15_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_15),16));

        conv3_i_i97_1_1_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_1_1),16));

        conv3_i_i97_1_2_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_1_2),16));

        conv3_i_i97_1_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_1),16));

        conv3_i_i97_214_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_214),16));

        conv3_i_i97_2_1_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_2_1),16));

        conv3_i_i97_2_2_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_2_2),16));

        conv3_i_i97_2_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97_2),16));

        conv3_i_i97_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv3_i_i97),16));

    empty_14_fu_759_p2 <= (tmp_2_fu_741_p3 or icmp_ln45_fu_736_p2);
    grp_fu_778_p0 <= grp_fu_778_p00(7 - 1 downto 0);
    grp_fu_778_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_431_p3),13));
    grp_fu_778_p1 <= ap_const_lv13_56(7 - 1 downto 0);
    grp_fu_778_p2 <= grp_fu_778_p20(7 - 1 downto 0);
    grp_fu_778_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_1_fu_485_p3),13));
    grp_fu_786_p0 <= grp_fu_786_p00(8 - 1 downto 0);
    grp_fu_786_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_299),16));
    grp_fu_786_p1 <= conv3_i_i97_2_2_cast_reg_897(8 - 1 downto 0);
    grp_fu_793_p0 <= grp_fu_793_p00(8 - 1 downto 0);
    grp_fu_793_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    grp_fu_793_p1 <= conv3_i_i97_214_cast_reg_927(8 - 1 downto 0);
    grp_fu_800_p0 <= grp_fu_800_p00(8 - 1 downto 0);
    grp_fu_800_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_299),16));
    grp_fu_800_p1 <= conv3_i_i97_cast_reg_937(8 - 1 downto 0);
    grp_fu_808_p0 <= grp_fu_808_p00(8 - 1 downto 0);
    grp_fu_808_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_299),16));
    grp_fu_808_p1 <= conv3_i_i97_1_1_cast_reg_917(8 - 1 downto 0);
    grp_fu_815_p0 <= grp_fu_815_p00(8 - 1 downto 0);
    grp_fu_815_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    grp_fu_815_p1 <= conv3_i_i97_2_cast_reg_907(8 - 1 downto 0);
    grp_fu_821_p0 <= grp_fu_821_p00(8 - 1 downto 0);
    grp_fu_821_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    grp_fu_821_p1 <= conv3_i_i97_2_1_cast_reg_902(8 - 1 downto 0);
    i_2_fu_431_p3 <= 
        i_19_fu_126 when (icmp_ln278_reg_288(0) = '1') else 
        i5_fu_114;
    i_fu_447_p2 <= std_logic_vector(unsigned(i_2_fu_431_p3) + unsigned(ap_const_lv7_1));
    icmp_ln25_fu_681_p2 <= "1" when (indvar_flatten2_fu_102 = ap_const_lv13_1CE3) else "0";
    icmp_ln27_fu_670_p2 <= "1" when (image_1d_idx_7_reg_974 = select_ln25_2_fu_617_p3) else "0";
    icmp_ln45_fu_736_p2 <= "1" when (signed(tmp_1_reg_1124) > signed(ap_const_lv13_0)) else "0";
    image_1d_idx_1_fu_558_p2 <= std_logic_vector(unsigned(select_ln25_reg_942) + unsigned(ap_const_lv13_58));
    image_1d_idx_2_fu_544_p2 <= std_logic_vector(unsigned(select_ln25_reg_942) + unsigned(ap_const_lv13_59));
    image_1d_idx_3_fu_572_p2 <= std_logic_vector(unsigned(select_ln25_reg_942) + unsigned(ap_const_lv13_5A));
    image_1d_idx_4_fu_598_p2 <= std_logic_vector(unsigned(select_ln25_reg_942) + unsigned(ap_const_lv13_B0));
    image_1d_idx_5_fu_642_p2 <= std_logic_vector(unsigned(select_ln25_reg_942) + unsigned(ap_const_lv13_B1));
    image_1d_idx_6_fu_409_p2 <= std_logic_vector(unsigned(select_ln25_fu_393_p3) + unsigned(ap_const_lv13_B2));
    image_1d_idx_7_fu_463_p2 <= std_logic_vector(unsigned(select_ln25_reg_942) + unsigned(ap_const_lv13_1));
    image_1d_idx_fu_493_p2 <= std_logic_vector(unsigned(select_ln25_reg_942) + unsigned(ap_const_lv13_2));
    image_in_address0 <= image_in_address0_local;

    image_in_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, zext_ln37_7_fu_415_p1, zext_ln27_1_fu_443_p1, ap_block_pp0_stage1, zext_ln37_fu_468_p1, ap_block_pp0_stage2, zext_ln37_1_fu_498_p1, ap_block_pp0_stage3, zext_ln37_3_fu_549_p1, ap_block_pp0_stage4, zext_ln37_2_fu_563_p1, ap_block_pp0_stage5, zext_ln37_4_fu_577_p1, ap_block_pp0_stage6, zext_ln37_5_fu_603_p1, ap_block_pp0_stage7, zext_ln37_6_fu_647_p1, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                image_in_address0_local <= zext_ln37_6_fu_647_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                image_in_address0_local <= zext_ln37_5_fu_603_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                image_in_address0_local <= zext_ln37_4_fu_577_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                image_in_address0_local <= zext_ln37_2_fu_563_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                image_in_address0_local <= zext_ln37_3_fu_549_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                image_in_address0_local <= zext_ln37_1_fu_498_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                image_in_address0_local <= zext_ln37_fu_468_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_in_address0_local <= zext_ln27_1_fu_443_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_in_address0_local <= zext_ln37_7_fu_415_p1(13 - 1 downto 0);
            else 
                image_in_address0_local <= "XXXXXXXXXXXXX";
            end if;
        else 
            image_in_address0_local <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    image_in_ce0 <= image_in_ce0_local;

    image_in_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
            image_in_ce0_local <= ap_const_logic_1;
        else 
            image_in_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_out_address0 <= zext_ln52_1_fu_774_p1(13 - 1 downto 0);
    image_out_ce0 <= image_out_ce0_local;

    image_out_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
            image_out_ce0_local <= ap_const_logic_1;
        else 
            image_out_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_out_d0 <= acc_sat_1_fu_765_p3;
    image_out_we0 <= image_out_we0_local;

    image_out_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            image_out_we0_local <= ap_const_logic_1;
        else 
            image_out_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_507_p2 <= std_logic_vector(unsigned(select_ln25_1_fu_485_p3) + unsigned(ap_const_lv7_1));
    mul_ln40_1_fu_531_p0 <= mul_ln40_1_fu_531_p00(8 - 1 downto 0);
    mul_ln40_1_fu_531_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_load_1_reg_989),16));
    mul_ln40_1_fu_531_p1 <= conv3_i_i97_15_cast_reg_932(8 - 1 downto 0);
    mul_ln40_3_fu_589_p0 <= mul_ln40_3_fu_589_p00(8 - 1 downto 0);
    mul_ln40_3_fu_589_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_299),16));
    mul_ln40_3_fu_589_p1 <= conv3_i_i97_1_cast_reg_922(8 - 1 downto 0);
    mul_ln40_5_fu_629_p0 <= mul_ln40_5_fu_629_p00(8 - 1 downto 0);
    mul_ln40_5_fu_629_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_299),16));
    mul_ln40_5_fu_629_p1 <= conv3_i_i97_1_2_cast_reg_912(8 - 1 downto 0);
    select_ln25_1_fu_485_p3 <= 
        ap_const_lv7_0 when (icmp_ln278_reg_288(0) = '1') else 
        j7_fu_122;
    select_ln25_2_fu_617_p3 <= 
        add_ln25_111_fu_134 when (icmp_ln278_reg_288(0) = '1') else 
        indvars_iv353_fu_106;
    select_ln25_3_fu_401_p3 <= 
        ap_sig_allocacmp_add_ln2510_load when (ap_phi_mux_icmp_ln278_phi_fu_291_p4(0) = '1') else 
        ap_sig_allocacmp_indvars_iv4_load;
    select_ln25_fu_393_p3 <= 
        ap_sig_allocacmp_add_ln2510_load when (ap_phi_mux_icmp_ln278_phi_fu_291_p4(0) = '1') else 
        ap_sig_allocacmp_image_1d_idx6_load;
        sext_ln40_3_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_821_p3),21));

        sext_ln40_4_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_800_p3),19));

        sext_ln40_6_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_6_reg_1064),19));

        sext_ln40_7_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_7_reg_1084),21));

    tmp_2_fu_741_p3 <= acc_reg_1118(20 downto 20);
    trunc_ln50_fu_748_p1 <= acc_reg_1118(8 - 1 downto 0);
    zext_ln27_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_942),64));
    zext_ln37_1_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_fu_493_p2),64));
    zext_ln37_2_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_1_fu_558_p2),64));
    zext_ln37_3_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_2_fu_544_p2),64));
    zext_ln37_4_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_3_fu_572_p2),64));
    zext_ln37_5_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_4_fu_598_p2),64));
    zext_ln37_6_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_5_fu_642_p2),64));
    zext_ln37_7_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_6_fu_409_p2),64));
    zext_ln37_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_7_fu_463_p2),64));
    zext_ln52_1_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_reg_1019),64));
end behav;
