// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axil_conv2D_axil_conv2D,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.221000,HLS_SYN_LAT=66581,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=872,HLS_SYN_LUT=1188,HLS_VERSION=2024_1}" *)

module axil_conv2D (
        ap_clk,
        ap_rst_n,
        s_axi_BUS1_AWVALID,
        s_axi_BUS1_AWREADY,
        s_axi_BUS1_AWADDR,
        s_axi_BUS1_WVALID,
        s_axi_BUS1_WREADY,
        s_axi_BUS1_WDATA,
        s_axi_BUS1_WSTRB,
        s_axi_BUS1_ARVALID,
        s_axi_BUS1_ARREADY,
        s_axi_BUS1_ARADDR,
        s_axi_BUS1_RVALID,
        s_axi_BUS1_RREADY,
        s_axi_BUS1_RDATA,
        s_axi_BUS1_RRESP,
        s_axi_BUS1_BVALID,
        s_axi_BUS1_BREADY,
        s_axi_BUS1_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_BUS1_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS1_ADDR_WIDTH = 15;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS1_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_BUS1_AWVALID;
output   s_axi_BUS1_AWREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_AWADDR;
input   s_axi_BUS1_WVALID;
output   s_axi_BUS1_WREADY;
input  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_WDATA;
input  [C_S_AXI_BUS1_WSTRB_WIDTH - 1:0] s_axi_BUS1_WSTRB;
input   s_axi_BUS1_ARVALID;
output   s_axi_BUS1_ARREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_ARADDR;
output   s_axi_BUS1_RVALID;
input   s_axi_BUS1_RREADY;
output  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_RDATA;
output  [1:0] s_axi_BUS1_RRESP;
output   s_axi_BUS1_BVALID;
input   s_axi_BUS1_BREADY;
output  [1:0] s_axi_BUS1_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] image_in_q0;
wire   [7:0] weights_q0;
wire   [31:0] bias;
reg   [7:0] weights_load_reg_191;
wire    ap_CS_fsm_state2;
reg   [7:0] weights_load_1_reg_201;
wire    ap_CS_fsm_state3;
reg   [7:0] weights_load_2_reg_211;
wire    ap_CS_fsm_state4;
reg   [7:0] weights_load_3_reg_221;
wire    ap_CS_fsm_state5;
reg   [7:0] weights_load_4_reg_231;
wire    ap_CS_fsm_state6;
reg   [7:0] weights_load_5_reg_241;
wire    ap_CS_fsm_state7;
reg   [7:0] weights_load_6_reg_251;
wire    ap_CS_fsm_state8;
reg   [7:0] weights_load_7_reg_261;
wire    ap_CS_fsm_state9;
wire   [20:0] empty_fu_181_p1;
reg   [20:0] empty_reg_271;
wire    ap_CS_fsm_state10;
reg   [7:0] weights_load_8_reg_276;
wire    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start;
wire    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done;
wire    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_idle;
wire    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_ready;
wire   [12:0] grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_address0;
wire    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_ce0;
wire   [12:0] grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_address0;
wire    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_ce0;
wire    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_we0;
wire   [7:0] grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_d0;
reg    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg;
wire    ap_CS_fsm_state11;
reg    weights_ce0_local;
reg   [3:0] weights_address0_local;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg = 1'b0;
end

axil_conv2D_axil_conv2D_Pipeline_loop_i_loop_j grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start),
    .ap_done(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done),
    .ap_idle(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_idle),
    .ap_ready(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_ready),
    .image_in_address0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_address0),
    .image_in_ce0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_ce0),
    .image_in_q0(image_in_q0),
    .conv3_i_i97(weights_load_reg_191),
    .conv3_i_i97_15(weights_load_1_reg_201),
    .conv3_i_i97_214(weights_load_2_reg_211),
    .conv3_i_i97_1(weights_load_3_reg_221),
    .conv3_i_i97_1_1(weights_load_4_reg_231),
    .conv3_i_i97_1_2(weights_load_5_reg_241),
    .conv3_i_i97_2(weights_load_6_reg_251),
    .conv3_i_i97_2_1(weights_load_7_reg_261),
    .conv3_i_i97_2_2(weights_load_8_reg_276),
    .empty(empty_reg_271),
    .image_out_address0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_address0),
    .image_out_ce0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_ce0),
    .image_out_we0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_we0),
    .image_out_d0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_d0)
);

axil_conv2D_BUS1_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS1_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS1_DATA_WIDTH ))
BUS1_s_axi_U(
    .AWVALID(s_axi_BUS1_AWVALID),
    .AWREADY(s_axi_BUS1_AWREADY),
    .AWADDR(s_axi_BUS1_AWADDR),
    .WVALID(s_axi_BUS1_WVALID),
    .WREADY(s_axi_BUS1_WREADY),
    .WDATA(s_axi_BUS1_WDATA),
    .WSTRB(s_axi_BUS1_WSTRB),
    .ARVALID(s_axi_BUS1_ARVALID),
    .ARREADY(s_axi_BUS1_ARREADY),
    .ARADDR(s_axi_BUS1_ARADDR),
    .RVALID(s_axi_BUS1_RVALID),
    .RREADY(s_axi_BUS1_RREADY),
    .RDATA(s_axi_BUS1_RDATA),
    .RRESP(s_axi_BUS1_RRESP),
    .BVALID(s_axi_BUS1_BVALID),
    .BREADY(s_axi_BUS1_BREADY),
    .BRESP(s_axi_BUS1_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .weights_address0(weights_address0_local),
    .weights_ce0(weights_ce0_local),
    .weights_q0(weights_q0),
    .bias(bias),
    .image_in_address0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_address0),
    .image_in_ce0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_ce0),
    .image_in_q0(image_in_q0),
    .image_out_address0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_address0),
    .image_out_ce0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_ce0),
    .image_out_we0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_we0),
    .image_out_d0(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_d0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg <= 1'b1;
        end else if ((grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_ready == 1'b1)) begin
            grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_reg_271 <= empty_fu_181_p1;
        weights_load_8_reg_276 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_load_1_reg_201 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_load_2_reg_211 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_load_3_reg_221 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_load_4_reg_231 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_load_5_reg_241 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_load_6_reg_251 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_load_7_reg_261 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_load_reg_191 <= weights_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_address0_local = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_address0_local = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_address0_local = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_address0_local = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_address0_local = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_address0_local = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_address0_local = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_address0_local = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weights_address0_local = 64'd0;
    end else begin
        weights_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        weights_ce0_local = 1'b1;
    end else begin
        weights_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_181_p1 = bias[20:0];

assign grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start = grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg;

endmodule //axil_conv2D
