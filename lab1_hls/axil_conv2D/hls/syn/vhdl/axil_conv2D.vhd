-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axil_conv2D is
generic (
    C_S_AXI_BUS1_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_BUS1_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS1_AWVALID : IN STD_LOGIC;
    s_axi_BUS1_AWREADY : OUT STD_LOGIC;
    s_axi_BUS1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_WVALID : IN STD_LOGIC;
    s_axi_BUS1_WREADY : OUT STD_LOGIC;
    s_axi_BUS1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS1_ARVALID : IN STD_LOGIC;
    s_axi_BUS1_ARREADY : OUT STD_LOGIC;
    s_axi_BUS1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_RVALID : OUT STD_LOGIC;
    s_axi_BUS1_RREADY : IN STD_LOGIC;
    s_axi_BUS1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS1_BVALID : OUT STD_LOGIC;
    s_axi_BUS1_BREADY : IN STD_LOGIC;
    s_axi_BUS1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axil_conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axil_conv2D_axil_conv2D,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.221000,HLS_SYN_LAT=66581,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=872,HLS_SYN_LUT=1188,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_load_reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weights_load_1_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal weights_load_2_reg_211 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal weights_load_3_reg_221 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal weights_load_4_reg_231 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weights_load_5_reg_241 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weights_load_6_reg_251 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weights_load_7_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal empty_fu_181_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_reg_271 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal weights_load_8_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_idle : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_ready : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_ce0 : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_ce0 : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_we0 : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal weights_ce0_local : STD_LOGIC;
    signal weights_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component axil_conv2D_axil_conv2D_Pipeline_loop_i_loop_j IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_in_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        image_in_ce0 : OUT STD_LOGIC;
        image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_15 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_214 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_1_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_1_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_2_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_i_i97_2_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        empty : IN STD_LOGIC_VECTOR (20 downto 0);
        image_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        image_out_ce0 : OUT STD_LOGIC;
        image_out_we0 : OUT STD_LOGIC;
        image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component axil_conv2D_BUS1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        weights_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        image_in_ce0 : IN STD_LOGIC;
        image_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        image_out_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        image_out_ce0 : IN STD_LOGIC;
        image_out_we0 : IN STD_LOGIC;
        image_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162 : component axil_conv2D_axil_conv2D_Pipeline_loop_i_loop_j
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start,
        ap_done => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done,
        ap_idle => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_idle,
        ap_ready => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_ready,
        image_in_address0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_address0,
        image_in_ce0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_ce0,
        image_in_q0 => image_in_q0,
        conv3_i_i97 => weights_load_reg_191,
        conv3_i_i97_15 => weights_load_1_reg_201,
        conv3_i_i97_214 => weights_load_2_reg_211,
        conv3_i_i97_1 => weights_load_3_reg_221,
        conv3_i_i97_1_1 => weights_load_4_reg_231,
        conv3_i_i97_1_2 => weights_load_5_reg_241,
        conv3_i_i97_2 => weights_load_6_reg_251,
        conv3_i_i97_2_1 => weights_load_7_reg_261,
        conv3_i_i97_2_2 => weights_load_8_reg_276,
        empty => empty_reg_271,
        image_out_address0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_address0,
        image_out_ce0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_ce0,
        image_out_we0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_we0,
        image_out_d0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_d0);

    BUS1_s_axi_U : component axil_conv2D_BUS1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS1_AWVALID,
        AWREADY => s_axi_BUS1_AWREADY,
        AWADDR => s_axi_BUS1_AWADDR,
        WVALID => s_axi_BUS1_WVALID,
        WREADY => s_axi_BUS1_WREADY,
        WDATA => s_axi_BUS1_WDATA,
        WSTRB => s_axi_BUS1_WSTRB,
        ARVALID => s_axi_BUS1_ARVALID,
        ARREADY => s_axi_BUS1_ARREADY,
        ARADDR => s_axi_BUS1_ARADDR,
        RVALID => s_axi_BUS1_RVALID,
        RREADY => s_axi_BUS1_RREADY,
        RDATA => s_axi_BUS1_RDATA,
        RRESP => s_axi_BUS1_RRESP,
        BVALID => s_axi_BUS1_BVALID,
        BREADY => s_axi_BUS1_BREADY,
        BRESP => s_axi_BUS1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        weights_address0 => weights_address0_local,
        weights_ce0 => weights_ce0_local,
        weights_q0 => weights_q0,
        bias => bias,
        image_in_address0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_address0,
        image_in_ce0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_in_ce0,
        image_in_q0 => image_in_q0,
        image_out_address0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_address0,
        image_out_ce0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_ce0,
        image_out_we0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_we0,
        image_out_d0 => grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_image_out_d0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_ready = ap_const_logic_1)) then 
                    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                empty_reg_271 <= empty_fu_181_p1;
                weights_load_8_reg_276 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                weights_load_1_reg_201 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                weights_load_2_reg_211 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                weights_load_3_reg_221 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                weights_load_4_reg_231 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                weights_load_5_reg_241 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weights_load_6_reg_251 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                weights_load_7_reg_261 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                weights_load_reg_191 <= weights_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done)
    begin
        if ((grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_fu_181_p1 <= bias(21 - 1 downto 0);
    grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start <= grp_axil_conv2D_Pipeline_loop_i_loop_j_fu_162_ap_start_reg;

    weights_address0_local_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_address0_local <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_address0_local <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights_address0_local <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_address0_local <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_address0_local <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_address0_local <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_address0_local <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_address0_local <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_address0_local <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            weights_address0_local <= "XXXX";
        end if; 
    end process;


    weights_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            weights_ce0_local <= ap_const_logic_1;
        else 
            weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

end behav;
